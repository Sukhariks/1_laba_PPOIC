# 1 –ª–∞–±–∞, –°—É—Ö–æ—Ä—É–∫–æ–≤ –ú–∏—Ö–∞–∏–ª, 421701, –ü–ü–û–ò–°
# –ü—è—Ç–Ω–∞—à–∫–∏
# –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:

import random
import sys


# MM
def main(): ...  # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


def show_menu(): ...  # –ø–æ–∫–∞–∑ –º–µ–Ω—é


def rules(): ...  # –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã


# G
class Tag_game: ...


# create_board():...
# check_board():...
# game()
# print_board
# check_win


# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è:
def main():
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É \"–ü—è—Ç–Ω–∞—à–∫–∏\"")
    while True:
        show_menu()
        try:
            choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (1-3)"))
            if choice not in [1, 2, 3]:
                print("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3!")
                continue
        except ValueError:
            print("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ")
            continue
        match choice:
            case 1:
                rules()
            case 2:
                game_instance = Tag_game()
                game_instance.game()
            case 3:
                print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
                sys.exit(0)


def show_menu():
    print("=" * 30)
    print("         –ú–ï–ù–Æ –ò–ì–†–´")
    print("=" * 30)
    print("1. –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã")
    print("2. –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
    print("3. –í—ã—Ö–æ–¥")
    print("=" * 30)


def rules():
    print("\nüìñ –ü–†–ê–í–ò–õ–ê –ò–ì–†–´:")
    print("–¶–µ–ª—å –∏–≥—Ä—ã - —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É")
    print("–æ—Ç 1 –¥–æ 15, –æ—Å—Ç–∞–≤–∏–≤ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É.")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –∏–ª–∏ WASD –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫.")
    input("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")


class Tag_game:

    def __init__(self, size=4):
        self.board = []
        self.zero_index = []
        self.size = size
        self.board_win = []

    def check_board(self, board):
        size = len(board)
        one_mass = []
        for i in range(size):
            for j in range(size):
                if board[i][j] != 0:
                    one_mass.append(board[i][j])

        inversia = 0
        for x in range(len(one_mass)):
            for y in range(x + 1, len(one_mass)):
                if one_mass[x] > one_mass[y]:
                    inversia += 1

        zero = 0
        for i in range(size):
            for j in range(size):
                if board[i][j] == 0:
                    zero = size - i
                    break

        if size % 2 == 1:
            return inversia % 2 == 0
        else:
            return (inversia + zero) % 2 == 1

    def create_board(self):
        numbers = list(range(1, self.size * self.size)) + [0]

        # –°–æ–∑–¥–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –¥–æ—Å–∫—É
        self.board_win = []
        num = 1
        for i in range(self.size):
            row = []
            for j in range(self.size):
                if i == self.size - 1 and j == self.size - 1:
                    row.append(0)
                else:
                    row.append(num)
                    num += 1
            self.board_win.append(row)

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é –¥–æ—Å–∫—É
        while True:
            random.shuffle(numbers)
            self.board = []
            index = 0
            for i in range(self.size):
                row = []
                for j in range(self.size):
                    row.append(numbers[index])
                    index += 1
                self.board.append(row)

            if self.check_board(self.board):
                break

        for i in range(self.size):
            for j in range(self.size):
                if self.board[i][j] == 0:
                    self.zero_index = [i, j]
                    return

    def print_board(self):
        print("\n" + "=" * (self.size * 3))
        for x in range(self.size):
            row = []
            for num in self.board[x]:
                if num != 0:
                    row.append(f"{num:2d}")
                else:
                    row.append("  ")
            print(" | ".join(row))
            if x < self.size - 1:
                print("-" * (self.size * 4 - 1))
        print("=" * (self.size * 3))

    def check_win(self):
        for i in range(self.size):
            for j in range(self.size):
                if self.board[i][j] != self.board_win[i][j]:
                    return False
        print("–ù–∞–ª–∏–≤–∞–π, –ø–æ–±–µ–¥–∞!")
        input("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")
        return True

    def game(self):
        self.create_board()
        while True:
            print("\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:")
            print("W/S/D/A - —Ö–æ–¥ (–≤–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª)")
            print("1. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã")
            print("2. –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é")
            self.print_board()

            choice = input("–¢–≤–æ–π —Ö–æ–¥: ").strip().lower()

            if choice not in ["1", "2", "w", "a", "s", "d"]:
                print("–í—ã–±–µ—Ä–∏—Ç–µ W/A/S/D, 1 –∏–ª–∏ 2!")
                continue

            if choice == "w":
                if self.zero_index[0] > 0:
                    value_above = self.board[self.zero_index[0] - 1][self.zero_index[1]]
                    self.board[self.zero_index[0]][self.zero_index[1]] = value_above
                    self.board[self.zero_index[0] - 1][self.zero_index[1]] = 0
                    self.zero_index[0] -= 1
                    if self.check_win():
                        return True
                else:
                    print("–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ–¥")

            elif choice == "s":
                if self.zero_index[0] < self.size - 1:
                    value_below = self.board[self.zero_index[0] + 1][self.zero_index[1]]
                    self.board[self.zero_index[0]][self.zero_index[1]] = value_below
                    self.board[self.zero_index[0] + 1][self.zero_index[1]] = 0
                    self.zero_index[0] += 1
                    if self.check_win():
                        return True
                else:
                    print("–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ–¥")

            elif choice == "a":
                if self.zero_index[1] > 0:
                    value_left = self.board[self.zero_index[0]][self.zero_index[1] - 1]
                    self.board[self.zero_index[0]][self.zero_index[1]] = value_left
                    self.board[self.zero_index[0]][self.zero_index[1] - 1] = 0
                    self.zero_index[1] -= 1
                    if self.check_win():
                        return True
                else:
                    print("–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ–¥")

            elif choice == "d":
                if self.zero_index[1] < self.size - 1:
                    value_right = self.board[self.zero_index[0]][self.zero_index[1] + 1]
                    self.board[self.zero_index[0]][self.zero_index[1]] = value_right
                    self.board[self.zero_index[0]][self.zero_index[1] + 1] = 0
                    self.zero_index[1] += 1
                    if self.check_win():
                        return True
                else:
                    print("–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ–¥")

            elif choice == "1":
                self.create_board()
                print("–î–æ—Å–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!")

            elif choice == "2":
                print("–¢—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å :)")
                return False


# –ì–ª–∞–≤–Ω–∞—è:
if __name__ == "__main__":
    main()